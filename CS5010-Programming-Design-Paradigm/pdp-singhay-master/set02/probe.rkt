#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.2.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 70 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
25 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
45 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
47 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1           0 1688 0 17 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 25 29 1 #"\n"
0 0 17 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 25 29 1 #"\n"
0 0 27 3 7 #"#reader"
0 0 25 3 1 #"("
0 0 14 3 3 #"lib"
0 0 25 3 1 #" "
0 0 19 3 25 #"\"htdp-beginner-reader.ss\""
0 0 25 3 1 #" "
0 0 19 3 6 #"\"lang\""
0 0 25 3 3 #")(("
0 0 14 3 7 #"modname"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 3 #") ("
0 0 14 3 19 #"read-case-sensitive"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 3 #") ("
0 0 14 3 10 #"teachpacks"
0 0 25 3 6 #" ()) ("
0 0 14 3 13 #"htdp-settings"
0 0 25 3 3 #" #("
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 14 3 11 #"constructor"
0 0 25 3 1 #" "
0 0 14 3 17 #"repeating-decimal"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 14 3 4 #"none"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 4 #" () "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 17 3 59
#";; probe.rkt : Fourth and Last Question of Problem Set 02. "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 69
(
 #";; Goal: Displace a Probe forward some number of steps 1cm at a time"
 #","
) 0 0 25 29 1 #"\n"
0 0 17 3 68
#";;       or rotate it 90 degrees either right or left within limits."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 19 3 12 #"\"extras.rkt\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 14 #"check-location"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"02\""
0 0 25 3 1 #" "
0 0 19 3 11 #"\"probe.rkt\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 7 #"provide"
0 0 25 3 1 #" "
0 0 14 3 8 #"probe-at"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 14 3 17 #"probe-turned-left"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 14 3 18 #"probe-turned-right"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 14 3 13 #"probe-forward"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 14 3 12 #"probe-north?"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 14 3 12 #"probe-south?"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 14 3 11 #"probe-east?"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 14 3 11 #"probe-west?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 32 #";; IN-BUILT functions used from:"
0 0 25 29 1 #"\n"
0 0 17 3 15 #";; 2htdp/image:"
0 0 25 29 1 #"\n"
0 0 17 3 67
#";;  rotate : (rotate degree image), Rotates image the given degrees"
0 0 25 29 1 #"\n"
0 0 17 3 58
#";;  place-image : (place-image image x y scene) \342\206\222 image?"
0 0 25 29 1 #"\n"
0 0 17 3 59
#";;  triangle : (triangle side-length mode color) \342\206\222 image?"
0 0 25 29 1 #"\n"
0 0 17 3 62
(
 #";;  rectangle : (rectangle width height mode color) \342\206\222 ima"
 #"ge?"
) 0 0 25 29 1 #"\n"
0 0 17 3 50
#";;  circle : (circle radius mode color) \342\206\222 image?"
0 0 25 29 1 #"\n"
0 0 17 3 75
(
 #";;  image=? : (image=? x y) \342\206\222 boolean?, Checks if x and y"
 #" the same image?"
) 0 0 25 29 1 #"\n"
0 0 17 3 14 #";; racket/base"
0 0 25 29 1 #"\n"
0 0 17 3 69
(
 #";;  cond : (cond [(> 5 9) 9][else 5]) = 5, Multiple Conditional Chec"
 #"k"
) 0 0 25 29 1 #"\n"
0 0 17 3 68
(
 #";;  if : (if (> 5 -5) \"5 is large\" \"-5 is large\"), Conditional C"
 #"heck"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 103
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #";; CONSTANTS"
0 0 25 29 1 #"\n"
0 0 17 3 66
#";; The probe-icon is a circle representing Probe, 40cm in diameter"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"rotate"
0 0 25 3 1 #" "
0 0 22 3 3 #"270"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 11 #"place-image"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 6 #"beside"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 6 #"rotate"
0 0 25 3 1 #" "
0 0 22 3 2 #"90"
0 0 25 3 2 #" ("
0 0 14 3 8 #"triangle"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 9 #"rectangle"
0 0 25 3 1 #" "
0 0 22 3 2 #"25"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 22 3 2 #"20"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 22 3 2 #"20"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"LIMIT"
0 0 25 3 1 #" "
0 0 22 3 3 #"153"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 17 #";; INTERPRETAION:"
0 0 25 29 1 #"\n"
0 0 17 3 48 #";;  LIMIT is the wall of the trap rounded to the"
0 0 25 29 1 #"\n"
0 0 17 3 48 #";;  lower limit of (173.5 - 20(radius of Probe))"
0 0 25 29 1 #"\n"
0 0 17 3 46 #";;  i.e. 153, since Probe moves 1cm at a time."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 102
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 19 #";; DATA DEFINITIONS"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #" "
0 0 14 3 4 #"logo"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 50 #";; A Probe is a (make-probe Integer Integer Image)"
0 0 25 29 1 #"\n"
0 0 17 3 65
#";; x and y are the coordinates of the center of the Probe, in cm,"
0 0 25 29 1 #"\n"
0 0 17 3 39 #";; relative to the origin of the scene."
0 0 25 29 1 #"\n"
0 0 17 3 60
#";; logo is the Image Representation of the Probe, in pixels."
0 0 25 29 1 #"\n"
0 0 17 3 18 #";; INTERPRETATION:"
0 0 25 29 1 #"\n"
0 0 17 3 7 #";; logo"
0 0 17 3 3 #" = "
0 12           4 17 743
(
 #"(#(struct:translate -0.0 0.0 #(struct:crop (#(struct:point 40.0 -0.0"
 #") #(struct:point 40.0 40.0) #(struct:point 0.0 40.0) #(struct:point "
 #"0.0 -0.0)) #(struct:overlay #(struct:overlay #(struct:polygon (#(str"
 #"uct:pulled-point 0 0 10.0 16.160254037844386 0 0) #(struct:pulled-po"
 #"int 0 0 30.0 16.160254037844386 0 0) #(struct:pulled-point 0 0 20.00"
 #"0000000000004 -1.160254037844389 0 0)) 255 \"black\") #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 25.0 16.160254037844386 0 0) #(struct:"
 #"pulled-point 0 0 25.0 41.16025403784438 0 0) #(struct:pulled-point 0"
 #" 0 15.0 41.16025403784438 0 0) #(struct:pulled-point 0 0 15.0 16.160"
 #"254037844386 0 0)) 255 \"black\")) #(struct:translate 20.0 20.0 #(st"
 #"ruct:ellipse 40 40 0 255 \"red\"))))) #(struct:bb 40.0 40.0 40.0) #f"
 #")"
) 0 0 17 3 24 #" or probe-icon: \"NORTH\"."
0 0 25 29 1 #"\n"
0 0 17 3 7 #";; logo"
0 0 17 3 3 #" = "
0 12           4 17 761
(
 #"(#(struct:translate 40.0 40.0 #(struct:crop (#(struct:point -40.0 0."
 #"0) #(struct:point -40.0 -40.0) #(struct:point 0.0 -40.0) #(struct:po"
 #"int 0.0 -0.0)) #(struct:overlay #(struct:overlay #(struct:polygon (#"
 #"(struct:pulled-point 0 0 -10.0 -16.160254037844386 0 0) #(struct:pul"
 #"led-point 0 0 -30.0 -16.160254037844386 0 0) #(struct:pulled-point 0"
 #" 0 -20.000000000000004 1.160254037844389 0 0)) 255 \"black\") #(stru"
 #"ct:polygon (#(struct:pulled-point 0 0 -25.0 -16.160254037844386 0 0)"
 #" #(struct:pulled-point 0 0 -25.0 -41.16025403784438 0 0) #(struct:pu"
 #"lled-point 0 0 -15.0 -41.16025403784438 0 0) #(struct:pulled-point 0"
 #" 0 -15.0 -16.160254037844386 0 0)) 255 \"black\")) #(struct:translat"
 #"e -20.0 -20.0 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:bb "
 #"40.0 40.0 40.0) #f)"
) 0 0 17 3 44 #" or probe-icon rotated 180 degrees: \"SOUTH\"."
0 0 25 29 1 #"\n"
0 0 17 3 7 #";; logo"
0 0 17 3 3 #" = "
0 12           4 17 752
(
 #"(#(struct:translate 40.0 -0.0 #(struct:crop (#(struct:point 0.0 40.0"
 #") #(struct:point -40.0 40.0) #(struct:point -40.0 -0.0) #(struct:poi"
 #"nt 0.0 -0.0)) #(struct:overlay #(struct:overlay #(struct:polygon (#("
 #"struct:pulled-point 0 0 -16.160254037844386 10.0 0 0) #(struct:pulle"
 #"d-point 0 0 -16.160254037844386 30.0 0 0) #(struct:pulled-point 0 0 "
 #"1.160254037844389 20.000000000000004 0 0)) 255 \"black\") #(struct:p"
 #"olygon (#(struct:pulled-point 0 0 -16.160254037844386 25.0 0 0) #(st"
 #"ruct:pulled-point 0 0 -41.16025403784438 25.0 0 0) #(struct:pulled-p"
 #"oint 0 0 -41.16025403784438 15.0 0 0) #(struct:pulled-point 0 0 -16."
 #"160254037844386 15.0 0 0)) 255 \"black\")) #(struct:translate -20.0 "
 #"20.0 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:bb 40.0 40.0"
 #" 40.0) #f)"
) 0 0 17 3 43 #" or probe-icon rotated 270 degrees: \"EAST\"."
0 0 25 29 1 #"\n"
0 0 17 3 7 #";; logo"
0 0 17 3 3 #" = "
0 12           4 17 755
(
 #"(#(struct:translate -0.0 40.0 #(struct:crop (#(struct:point -0.0 -40"
 #".0) #(struct:point 40.0 -40.0) #(struct:point 40.0 -0.0) #(struct:po"
 #"int 0.0 -0.0)) #(struct:overlay #(struct:overlay #(struct:polygon (#"
 #"(struct:pulled-point 0 0 16.160254037844386 -10.0 0 0) #(struct:pull"
 #"ed-point 0 0 16.160254037844386 -30.0 0 0) #(struct:pulled-point 0 0"
 #" -1.160254037844389 -20.000000000000004 0 0)) 255 \"black\") #(struc"
 #"t:polygon (#(struct:pulled-point 0 0 16.160254037844386 -25.0 0 0) #"
 #"(struct:pulled-point 0 0 41.16025403784438 -25.0 0 0) #(struct:pulle"
 #"d-point 0 0 41.16025403784438 -15.0 0 0) #(struct:pulled-point 0 0 1"
 #"6.160254037844386 -15.0 0 0)) 255 \"black\")) #(struct:translate 20."
 #"0 -20.0 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:bb 40.0 4"
 #"0.0 40.0) #f)"
) 0 0 17 3 42 #" or probe-icon rotated 90 degrees: \"WEST\"."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #";; TEMPLATE:"
0 0 25 29 1 #"\n"
0 0 17 3 22 #";; (define probe-fn P)"
0 0 25 29 1 #"\n"
0 0 17 3 9 #";;   (..."
0 0 25 29 1 #"\n"
0 0 17 3 18 #";;     (probe-x P)"
0 0 25 29 1 #"\n"
0 0 17 3 18 #";;     (probe-y P)"
0 0 25 29 1 #"\n"
0 0 17 3 23 #";;     (probe-logo P)))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 102
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 38 #";; probe-at : Integer Integer -> Probe"
0 0 25 29 1 #"\n"
0 0 17 3 44 #";; GIVEN: an x-coordinate and a y-coordinate"
0 0 25 29 1 #"\n"
0 0 17 3 71
(
 #";; RETURNS: a probe with its center at those coordinates, facing nor"
 #"th."
) 0 0 25 29 1 #"\n"
0 0 17 3 24 #";; DESIGN STRATEGY: none"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 8 #"probe-at"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 37 #";; probe-turned-left : Probe -> Probe"
0 0 25 29 1 #"\n"
0 0 17 3 38 #";; probe-turned-right : Probe -> Probe"
0 0 25 29 1 #"\n"
0 0 17 3 17 #";; GIVEN: a probe"
0 0 25 29 1 #"\n"
0 0 17 3 82
(
 #";; RETURNS: a probe like the original, but turned 90 degrees either "
 #"left or right."
) 0 0 25 29 1 #"\n"
0 0 17 3 12 #";; EXAMPLES:"
0 0 25 29 1 #"\n"
0 0 17 3 38 #";; (probe-turned-left (make-probe 0 0 "
0 12           4 17 743
(
 #"(#(struct:translate -0.0 0.0 #(struct:crop (#(struct:point 40.0 -0.0"
 #") #(struct:point 40.0 40.0) #(struct:point 0.0 40.0) #(struct:point "
 #"0.0 -0.0)) #(struct:overlay #(struct:overlay #(struct:polygon (#(str"
 #"uct:pulled-point 0 0 10.0 16.160254037844386 0 0) #(struct:pulled-po"
 #"int 0 0 30.0 16.160254037844386 0 0) #(struct:pulled-point 0 0 20.00"
 #"0000000000004 -1.160254037844389 0 0)) 255 \"black\") #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 25.0 16.160254037844386 0 0) #(struct:"
 #"pulled-point 0 0 25.0 41.16025403784438 0 0) #(struct:pulled-point 0"
 #" 0 15.0 41.16025403784438 0 0) #(struct:pulled-point 0 0 15.0 16.160"
 #"254037844386 0 0)) 255 \"black\")) #(struct:translate 20.0 20.0 #(st"
 #"ruct:ellipse 40 40 0 255 \"red\"))))) #(struct:bb 40.0 40.0 40.0) #f"
 #")"
) 0 0 17 3 5 #")) = "
0 0 17 3 16 #"(make-probe 0 0 "
0 12           4 17 755
(
 #"(#(struct:translate -0.0 40.0 #(struct:crop (#(struct:point -0.0 -40"
 #".0) #(struct:point 40.0 -40.0) #(struct:point 40.0 -0.0) #(struct:po"
 #"int 0.0 -0.0)) #(struct:overlay #(struct:overlay #(struct:polygon (#"
 #"(struct:pulled-point 0 0 16.160254037844386 -10.0 0 0) #(struct:pull"
 #"ed-point 0 0 16.160254037844386 -30.0 0 0) #(struct:pulled-point 0 0"
 #" -1.160254037844389 -20.000000000000004 0 0)) 255 \"black\") #(struc"
 #"t:polygon (#(struct:pulled-point 0 0 16.160254037844386 -25.0 0 0) #"
 #"(struct:pulled-point 0 0 41.16025403784438 -25.0 0 0) #(struct:pulle"
 #"d-point 0 0 41.16025403784438 -15.0 0 0) #(struct:pulled-point 0 0 1"
 #"6.160254037844386 -15.0 0 0)) 255 \"black\")) #(struct:translate 20."
 #"0 -20.0 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:bb 40.0 4"
 #"0.0 40.0) #f)"
) 0 0 17 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 39 #";; (probe-turned-right (make-probe 0 0 "
0 12           4 17 743
(
 #"(#(struct:translate -0.0 0.0 #(struct:crop (#(struct:point 40.0 -0.0"
 #") #(struct:point 40.0 40.0) #(struct:point 0.0 40.0) #(struct:point "
 #"0.0 -0.0)) #(struct:overlay #(struct:overlay #(struct:polygon (#(str"
 #"uct:pulled-point 0 0 10.0 16.160254037844386 0 0) #(struct:pulled-po"
 #"int 0 0 30.0 16.160254037844386 0 0) #(struct:pulled-point 0 0 20.00"
 #"0000000000004 -1.160254037844389 0 0)) 255 \"black\") #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 25.0 16.160254037844386 0 0) #(struct:"
 #"pulled-point 0 0 25.0 41.16025403784438 0 0) #(struct:pulled-point 0"
 #" 0 15.0 41.16025403784438 0 0) #(struct:pulled-point 0 0 15.0 16.160"
 #"254037844386 0 0)) 255 \"black\")) #(struct:translate 20.0 20.0 #(st"
 #"ruct:ellipse 40 40 0 255 \"red\"))))) #(struct:bb 40.0 40.0 40.0) #f"
 #")"
) 0 0 17 3 5 #")) = "
0 0 17 3 16 #"(make-probe 0 0 "
0 12           4 17 752
(
 #"(#(struct:translate 40.0 -0.0 #(struct:crop (#(struct:point 0.0 40.0"
 #") #(struct:point -40.0 40.0) #(struct:point -40.0 -0.0) #(struct:poi"
 #"nt 0.0 -0.0)) #(struct:overlay #(struct:overlay #(struct:polygon (#("
 #"struct:pulled-point 0 0 -16.160254037844386 10.0 0 0) #(struct:pulle"
 #"d-point 0 0 -16.160254037844386 30.0 0 0) #(struct:pulled-point 0 0 "
 #"1.160254037844389 20.000000000000004 0 0)) 255 \"black\") #(struct:p"
 #"olygon (#(struct:pulled-point 0 0 -16.160254037844386 25.0 0 0) #(st"
 #"ruct:pulled-point 0 0 -41.16025403784438 25.0 0 0) #(struct:pulled-p"
 #"oint 0 0 -41.16025403784438 15.0 0 0) #(struct:pulled-point 0 0 -16."
 #"160254037844386 15.0 0 0)) 255 \"black\")) #(struct:translate -20.0 "
 #"20.0 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:bb 40.0 40.0"
 #" 40.0) #f)"
) 0 0 17 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 44 #";; DESIGN-STRATEGY: Combine Simpler Function"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 17 #"probe-turned-left"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 10 #"make-probe"
0 0 25 3 2 #" ("
0 0 14 3 7 #"probe-x"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 3 #") ("
0 0 14 3 7 #"probe-y"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 3 #") ("
0 0 14 3 6 #"rotate"
0 0 25 3 1 #" "
0 0 22 3 2 #"90"
0 0 25 3 2 #" ("
0 0 14 3 10 #"probe-logo"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 18 #"probe-turned-right"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 10 #"make-probe"
0 0 25 3 2 #" ("
0 0 14 3 7 #"probe-x"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 3 #") ("
0 0 14 3 7 #"probe-y"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 3 #") ("
0 0 14 3 6 #"rotate"
0 0 25 3 1 #" "
0 0 22 3 3 #"-90"
0 0 25 3 2 #" ("
0 0 14 3 10 #"probe-logo"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 40 #";; probe-forward : Probe PosInt -> Probe"
0 0 25 29 1 #"\n"
0 0 17 3 32 #";; GIVEN: a probe and a distance"
0 0 25 29 1 #"\n"
0 0 17 3 64
#";; RETURNS: a probe like the given one, but moved forward by the"
0 0 25 29 1 #"\n"
0 0 17 3 70
(
 #";; specified distance.  If moving forward the specified distance wou"
 #"ld"
) 0 0 25 29 1 #"\n"
0 0 17 3 70
(
 #";; cause the probe to hit any wall of the trap, then the probe shoul"
 #"d "
) 0 0 25 29 1 #"\n"
0 0 17 3 56 #";; move as far as it can inside the trap, and then stop."
0 0 25 29 1 #"\n"
0 0 17 3 12 #";; EXAMPLES:"
0 0 25 29 1 #"\n"
0 0 17 3 34 #";; (probe-forward (make-probe 0 0 "
0 12           4 17 743
(
 #"(#(struct:translate -0.0 0.0 #(struct:crop (#(struct:point 40.0 -0.0"
 #") #(struct:point 40.0 40.0) #(struct:point 0.0 40.0) #(struct:point "
 #"0.0 -0.0)) #(struct:overlay #(struct:overlay #(struct:polygon (#(str"
 #"uct:pulled-point 0 0 10.0 16.160254037844386 0 0) #(struct:pulled-po"
 #"int 0 0 30.0 16.160254037844386 0 0) #(struct:pulled-point 0 0 20.00"
 #"0000000000004 -1.160254037844389 0 0)) 255 \"black\") #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 25.0 16.160254037844386 0 0) #(struct:"
 #"pulled-point 0 0 25.0 41.16025403784438 0 0) #(struct:pulled-point 0"
 #" 0 15.0 41.16025403784438 0 0) #(struct:pulled-point 0 0 15.0 16.160"
 #"254037844386 0 0)) 255 \"black\")) #(struct:translate 20.0 20.0 #(st"
 #"ruct:ellipse 40 40 0 255 \"red\"))))) #(struct:bb 40.0 40.0 40.0) #f"
 #")"
) 0 0 17 3 8 #") 57) = "
0 0 17 3 18 #"(make-probe 0 -57 "
0 12           4 17 743
(
 #"(#(struct:translate -0.0 0.0 #(struct:crop (#(struct:point 40.0 -0.0"
 #") #(struct:point 40.0 40.0) #(struct:point 0.0 40.0) #(struct:point "
 #"0.0 -0.0)) #(struct:overlay #(struct:overlay #(struct:polygon (#(str"
 #"uct:pulled-point 0 0 10.0 16.160254037844386 0 0) #(struct:pulled-po"
 #"int 0 0 30.0 16.160254037844386 0 0) #(struct:pulled-point 0 0 20.00"
 #"0000000000004 -1.160254037844389 0 0)) 255 \"black\") #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 25.0 16.160254037844386 0 0) #(struct:"
 #"pulled-point 0 0 25.0 41.16025403784438 0 0) #(struct:pulled-point 0"
 #" 0 15.0 41.16025403784438 0 0) #(struct:pulled-point 0 0 15.0 16.160"
 #"254037844386 0 0)) 255 \"black\")) #(struct:translate 20.0 20.0 #(st"
 #"ruct:ellipse 40 40 0 255 \"red\"))))) #(struct:bb 40.0 40.0 40.0) #f"
 #")"
) 0 0 17 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 34 #";; (probe-forward (make-probe 0 0 "
0 12           4 17 755
(
 #"(#(struct:translate -0.0 40.0 #(struct:crop (#(struct:point -0.0 -40"
 #".0) #(struct:point 40.0 -40.0) #(struct:point 40.0 -0.0) #(struct:po"
 #"int 0.0 -0.0)) #(struct:overlay #(struct:overlay #(struct:polygon (#"
 #"(struct:pulled-point 0 0 16.160254037844386 -10.0 0 0) #(struct:pull"
 #"ed-point 0 0 16.160254037844386 -30.0 0 0) #(struct:pulled-point 0 0"
 #" -1.160254037844389 -20.000000000000004 0 0)) 255 \"black\") #(struc"
 #"t:polygon (#(struct:pulled-point 0 0 16.160254037844386 -25.0 0 0) #"
 #"(struct:pulled-point 0 0 41.16025403784438 -25.0 0 0) #(struct:pulle"
 #"d-point 0 0 41.16025403784438 -15.0 0 0) #(struct:pulled-point 0 0 1"
 #"6.160254037844386 -15.0 0 0)) 255 \"black\")) #(struct:translate 20."
 #"0 -20.0 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:bb 40.0 4"
 #"0.0 40.0) #f)"
) 0 0 17 3 8 #") 57) = "
0 0 17 3 18 #"(make-probe -57 0 "
0 12           4 17 755
(
 #"(#(struct:translate -0.0 40.0 #(struct:crop (#(struct:point -0.0 -40"
 #".0) #(struct:point 40.0 -40.0) #(struct:point 40.0 -0.0) #(struct:po"
 #"int 0.0 -0.0)) #(struct:overlay #(struct:overlay #(struct:polygon (#"
 #"(struct:pulled-point 0 0 16.160254037844386 -10.0 0 0) #(struct:pull"
 #"ed-point 0 0 16.160254037844386 -30.0 0 0) #(struct:pulled-point 0 0"
 #" -1.160254037844389 -20.000000000000004 0 0)) 255 \"black\") #(struc"
 #"t:polygon (#(struct:pulled-point 0 0 16.160254037844386 -25.0 0 0) #"
 #"(struct:pulled-point 0 0 41.16025403784438 -25.0 0 0) #(struct:pulle"
 #"d-point 0 0 41.16025403784438 -15.0 0 0) #(struct:pulled-point 0 0 1"
 #"6.160254037844386 -15.0 0 0)) 255 \"black\")) #(struct:translate 20."
 #"0 -20.0 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:bb 40.0 4"
 #"0.0 40.0) #f)"
) 0 0 17 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 60
#";; DESIGN STRATEGY: Divide into Cases using Probe Direction."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"probe-forward"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 1 #" "
0 0 14 3 8 #"distance"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 12 #"probe-north?"
0 0 25 3 2 #" ("
0 0 14 3 10 #"probe-logo"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 4 #")) ("
0 0 14 3 16 #"check-dist-north"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 1 #" "
0 0 14 3 8 #"distance"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 12 #"probe-south?"
0 0 25 3 2 #" ("
0 0 14 3 10 #"probe-logo"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 4 #")) ("
0 0 14 3 16 #"check-dist-south"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 1 #" "
0 0 14 3 8 #"distance"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 11 #"probe-east?"
0 0 25 3 2 #" ("
0 0 14 3 10 #"probe-logo"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 4 #")) ("
0 0 14 3 15 #"check-dist-east"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 1 #" "
0 0 14 3 8 #"distance"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 11 #"probe-west?"
0 0 25 3 2 #" ("
0 0 14 3 10 #"probe-logo"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 4 #")) ("
0 0 14 3 15 #"check-dist-west"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 1 #" "
0 0 14 3 8 #"distance"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 34 #";; probe-north? : Probe -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 34 #";; probe-south? : Probe -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 33 #";; probe-east? : Probe -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 33 #";; probe-west? : Probe -> Boolean"
0 0 25 29 1 #"\n"
0 0 17 3 17 #";; GIVEN: a probe"
0 0 25 29 1 #"\n"
0 0 17 3 67
#";; ANSWERS: whether the probe is facing in the specified direction."
0 0 25 29 1 #"\n"
0 0 17 3 12 #";; EXAMPLES:"
0 0 25 29 1 #"\n"
0 0 17 3 17 #";; (probe-north? "
0 0 17 3 16 #"(make-probe 0 0 "
0 12           4 17 743
(
 #"(#(struct:translate -0.0 0.0 #(struct:crop (#(struct:point 40.0 -0.0"
 #") #(struct:point 40.0 40.0) #(struct:point 0.0 40.0) #(struct:point "
 #"0.0 -0.0)) #(struct:overlay #(struct:overlay #(struct:polygon (#(str"
 #"uct:pulled-point 0 0 10.0 16.160254037844386 0 0) #(struct:pulled-po"
 #"int 0 0 30.0 16.160254037844386 0 0) #(struct:pulled-point 0 0 20.00"
 #"0000000000004 -1.160254037844389 0 0)) 255 \"black\") #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 25.0 16.160254037844386 0 0) #(struct:"
 #"pulled-point 0 0 25.0 41.16025403784438 0 0) #(struct:pulled-point 0"
 #" 0 15.0 41.16025403784438 0 0) #(struct:pulled-point 0 0 15.0 16.160"
 #"254037844386 0 0)) 255 \"black\")) #(struct:translate 20.0 20.0 #(st"
 #"ruct:ellipse 40 40 0 255 \"red\"))))) #(struct:bb 40.0 40.0 40.0) #f"
 #")"
) 0 0 17 3 9 #")) = true"
0 0 25 29 1 #"\n"
0 0 17 3 33 #";; (probe-south? (make-probe 0 0 "
0 12           4 17 761
(
 #"(#(struct:translate 40.0 40.0 #(struct:crop (#(struct:point -40.0 0."
 #"0) #(struct:point -40.0 -40.0) #(struct:point 0.0 -40.0) #(struct:po"
 #"int 0.0 -0.0)) #(struct:overlay #(struct:overlay #(struct:polygon (#"
 #"(struct:pulled-point 0 0 -10.0 -16.160254037844386 0 0) #(struct:pul"
 #"led-point 0 0 -30.0 -16.160254037844386 0 0) #(struct:pulled-point 0"
 #" 0 -20.000000000000004 1.160254037844389 0 0)) 255 \"black\") #(stru"
 #"ct:polygon (#(struct:pulled-point 0 0 -25.0 -16.160254037844386 0 0)"
 #" #(struct:pulled-point 0 0 -25.0 -41.16025403784438 0 0) #(struct:pu"
 #"lled-point 0 0 -15.0 -41.16025403784438 0 0) #(struct:pulled-point 0"
 #" 0 -15.0 -16.160254037844386 0 0)) 255 \"black\")) #(struct:translat"
 #"e -20.0 -20.0 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:bb "
 #"40.0 40.0 40.0) #f)"
) 0 0 17 3 9 #")) = true"
0 0 25 29 1 #"\n"
0 0 17 3 16 #";; (probe-east? "
0 0 17 3 16 #"(make-probe 0 0 "
0 12           4 17 752
(
 #"(#(struct:translate 40.0 -0.0 #(struct:crop (#(struct:point 0.0 40.0"
 #") #(struct:point -40.0 40.0) #(struct:point -40.0 -0.0) #(struct:poi"
 #"nt 0.0 -0.0)) #(struct:overlay #(struct:overlay #(struct:polygon (#("
 #"struct:pulled-point 0 0 -16.160254037844386 10.0 0 0) #(struct:pulle"
 #"d-point 0 0 -16.160254037844386 30.0 0 0) #(struct:pulled-point 0 0 "
 #"1.160254037844389 20.000000000000004 0 0)) 255 \"black\") #(struct:p"
 #"olygon (#(struct:pulled-point 0 0 -16.160254037844386 25.0 0 0) #(st"
 #"ruct:pulled-point 0 0 -41.16025403784438 25.0 0 0) #(struct:pulled-p"
 #"oint 0 0 -41.16025403784438 15.0 0 0) #(struct:pulled-point 0 0 -16."
 #"160254037844386 15.0 0 0)) 255 \"black\")) #(struct:translate -20.0 "
 #"20.0 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:bb 40.0 40.0"
 #" 40.0) #f)"
) 0 0 17 3 9 #")) = true"
0 0 25 29 1 #"\n"
0 0 17 3 16 #";; (probe-west? "
0 0 17 3 16 #"(make-probe 0 0 "
0 12           4 17 755
(
 #"(#(struct:translate -0.0 40.0 #(struct:crop (#(struct:point -0.0 -40"
 #".0) #(struct:point 40.0 -40.0) #(struct:point 40.0 -0.0) #(struct:po"
 #"int 0.0 -0.0)) #(struct:overlay #(struct:overlay #(struct:polygon (#"
 #"(struct:pulled-point 0 0 16.160254037844386 -10.0 0 0) #(struct:pull"
 #"ed-point 0 0 16.160254037844386 -30.0 0 0) #(struct:pulled-point 0 0"
 #" -1.160254037844389 -20.000000000000004 0 0)) 255 \"black\") #(struc"
 #"t:polygon (#(struct:pulled-point 0 0 16.160254037844386 -25.0 0 0) #"
 #"(struct:pulled-point 0 0 41.16025403784438 -25.0 0 0) #(struct:pulle"
 #"d-point 0 0 41.16025403784438 -15.0 0 0) #(struct:pulled-point 0 0 1"
 #"6.160254037844386 -15.0 0 0)) 255 \"black\")) #(struct:translate 20."
 #"0 -20.0 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:bb 40.0 4"
 #"0.0 40.0) #f)"
) 0 0 17 3 9 #")) = true"
0 0 25 29 1 #"\n"
0 0 17 3 45 #";; DESIGN-STRATEGY: Combine Simpler Fucntions"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"probe-north?"
0 0 25 3 1 #" "
0 0 14 3 4 #"logo"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 7 #"image=?"
0 0 25 3 1 #" "
0 0 14 3 4 #"logo"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 2 #") "
0 0 14 3 4 #"true"
0 0 25 3 1 #" "
0 0 14 3 5 #"false"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"probe-south?"
0 0 25 3 1 #" "
0 0 14 3 4 #"logo"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 7 #"image=?"
0 0 25 3 1 #" "
0 0 14 3 4 #"logo"
0 0 25 3 2 #" ("
0 0 14 3 6 #"rotate"
0 0 25 3 1 #" "
0 0 22 3 3 #"180"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 3 #")) "
0 0 14 3 4 #"true"
0 0 25 3 1 #" "
0 0 14 3 5 #"false"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"probe-east?"
0 0 25 3 1 #" "
0 0 14 3 4 #"logo"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 7 #"image=?"
0 0 25 3 1 #" "
0 0 14 3 4 #"logo"
0 0 25 3 2 #" ("
0 0 14 3 6 #"rotate"
0 0 25 3 1 #" "
0 0 22 3 3 #"-90"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 3 #")) "
0 0 14 3 4 #"true"
0 0 25 3 1 #" "
0 0 14 3 5 #"false"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"probe-west?"
0 0 25 3 1 #" "
0 0 14 3 4 #"logo"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 7 #"image=?"
0 0 25 3 1 #" "
0 0 14 3 4 #"logo"
0 0 25 3 2 #" ("
0 0 14 3 6 #"rotate"
0 0 25 3 1 #" "
0 0 22 3 2 #"90"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 3 #")) "
0 0 14 3 4 #"true"
0 0 25 3 1 #" "
0 0 14 3 5 #"false"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 43 #";; check-dist-north : Probe PosInt -> Probe"
0 0 25 29 1 #"\n"
0 0 17 3 43 #";; check-dist-south : Probe PosInt -> Probe"
0 0 25 29 1 #"\n"
0 0 17 3 42 #";; check-dist-east : Probe PosInt -> Probe"
0 0 25 29 1 #"\n"
0 0 17 3 42 #";; check-dist-west : Probe PosInt -> Probe"
0 0 25 29 1 #"\n"
0 0 17 3 32 #";; GIVEN: a probe and a distance"
0 0 25 29 1 #"\n"
0 0 17 3 64
#";; RETURNS: a probe like the given one, but moved forward by the"
0 0 25 29 1 #"\n"
0 0 17 3 69
(
 #";; specified distance. If moving forward the specified distance woul"
 #"d"
) 0 0 25 29 1 #"\n"
0 0 17 3 70
(
 #";; cause the probe to hit any wall of the trap, then the probe shoul"
 #"d "
) 0 0 25 29 1 #"\n"
0 0 17 3 56 #";; move as far as it can inside the trap, and then stop."
0 0 25 29 1 #"\n"
0 0 17 3 12 #";; EXAMPLES:"
0 0 25 29 1 #"\n"
0 0 17 3 85
(
 #";; (check-dist-north (make-probe 0 0 probe-icon) 200) =  (probe-at 0"
 #" -153 probe-icon)"
) 0 0 25 29 1 #"\n"
0 0 17 3 84
(
 #";; (check-dist-south (make-probe 0 0 probe-icon) 200) =  (probe-at 0"
 #" 153 probe-icon)"
) 0 0 25 29 1 #"\n"
0 0 17 3 83
(
 #";; (check-dist-east (make-probe 0 0 probe-icon) 200) =  (probe-at 15"
 #"3 0 probe-icon)"
) 0 0 25 29 1 #"\n"
0 0 17 3 85
(
 #";; (check-dist-south (make-probe 0 0 probe-icon) 200) =  (probe-at -"
 #"153 0 probe-icon)"
) 0 0 25 29 1 #"\n"
0 0 17 3 46 #";; DESIGN-STRATEGY: Divide into Cases based on"
0 0 25 29 1 #"\n"
0 0 17 3 39 #";;                  Probe Travel limit."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"check-dist-north"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 1 #" "
0 0 14 3 8 #"distance"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 2 #"<="
0 0 25 3 1 #" "
0 0 14 3 8 #"distance"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 5 #"LIMIT"
0 0 25 3 2 #" ("
0 0 14 3 7 #"probe-y"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 10 #"move-north"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 2 #" ("
0 0 14 3 7 #"probe-y"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #") "
0 0 14 3 8 #"distance"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 10 #"move-north"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 5 #"LIMIT"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"check-dist-south"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 1 #" "
0 0 14 3 8 #"distance"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 2 #"<="
0 0 25 3 1 #" "
0 0 14 3 8 #"distance"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 5 #"LIMIT"
0 0 25 3 2 #" ("
0 0 14 3 7 #"probe-y"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 10 #"move-south"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 7 #"probe-y"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #") "
0 0 14 3 8 #"distance"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 10 #"move-south"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 1 #" "
0 0 14 3 5 #"LIMIT"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"check-dist-east"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 1 #" "
0 0 14 3 8 #"distance"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 2 #"<="
0 0 25 3 1 #" "
0 0 14 3 8 #"distance"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 5 #"LIMIT"
0 0 25 3 2 #" ("
0 0 14 3 7 #"probe-x"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 9 #"move-east"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 7 #"probe-x"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #") "
0 0 14 3 8 #"distance"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 9 #"move-east"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 1 #" "
0 0 14 3 5 #"LIMIT"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"check-dist-west"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 1 #" "
0 0 14 3 8 #"distance"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 2 #"<="
0 0 25 3 1 #" "
0 0 14 3 8 #"distance"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 5 #"LIMIT"
0 0 25 3 2 #" ("
0 0 14 3 7 #"probe-x"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 9 #"move-west"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 2 #" ("
0 0 14 3 7 #"probe-x"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #") "
0 0 14 3 8 #"distance"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 9 #"move-west"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 5 #"LIMIT"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 37 #";; move-north : Probe PosInt -> Probe"
0 0 25 29 1 #"\n"
0 0 17 3 37 #";; move-south : Probe PosInt -> Probe"
0 0 25 29 1 #"\n"
0 0 17 3 36 #";; move-east : Probe PosInt -> Probe"
0 0 25 29 1 #"\n"
0 0 17 3 36 #";; move-west : Probe PosInt -> Probe"
0 0 25 29 1 #"\n"
0 0 17 3 32 #";; GIVEN: a probe and a distance"
0 0 25 29 1 #"\n"
0 0 17 3 64
#";; RETURNS: a probe like the given one, but moved forward by the"
0 0 25 29 1 #"\n"
0 0 17 3 36 #";; specified distance 1cm at a time."
0 0 25 29 1 #"\n"
0 0 17 3 12 #";; EXAMPLES:"
0 0 25 29 1 #"\n"
0 0 17 3 76
(
 #";; (move-north (make-probe 0 0 probe-icon) 28) = (probe-at -28 0 pro"
 #"be-icon)"
) 0 0 25 29 1 #"\n"
0 0 17 3 75
(
 #";; (move-south (make-probe 0 0 probe-icon) 28) = (probe-at 0 28 prob"
 #"e-icon)"
) 0 0 25 29 1 #"\n"
0 0 17 3 74
(
 #";; (move-east (make-probe 0 0 probe-icon) 28) = (probe-at 28 0 probe"
 #"-icon)"
) 0 0 25 29 1 #"\n"
0 0 17 3 75
(
 #";; (move-west (make-probe 0 0 probe-icon) 28) = (probe-at -28 0 prob"
 #"e-icon)"
) 0 0 25 29 1 #"\n"
0 0 17 3 48 #";; DESIGN-STRATEGY: Divide into Cases to prevent"
0 0 25 29 1 #"\n"
0 0 17 3 47 #";;                  probe from hitting the Wall"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"move-north"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 1 #" "
0 0 14 3 8 #"distance"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 7 #"probe-y"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #") "
0 0 14 3 8 #"distance"
0 0 25 3 2 #") "
0 0 14 3 5 #"probe"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 10 #"move-north"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 10 #"make-probe"
0 0 25 3 2 #" ("
0 0 14 3 7 #"probe-x"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 3 #") ("
0 0 14 3 1 #"-"
0 0 25 3 2 #" ("
0 0 14 3 7 #"probe-y"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 3 #") ("
0 0 14 3 10 #"probe-logo"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 8 #"distance"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"move-south"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 1 #" "
0 0 14 3 8 #"distance"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 7 #"probe-y"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #") "
0 0 14 3 8 #"distance"
0 0 25 3 2 #") "
0 0 14 3 5 #"probe"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 10 #"move-south"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 10 #"make-probe"
0 0 25 3 2 #" ("
0 0 14 3 7 #"probe-x"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 3 #") ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 7 #"probe-y"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 3 #") ("
0 0 14 3 10 #"probe-logo"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 8 #"distance"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"move-east"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 1 #" "
0 0 14 3 8 #"distance"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 7 #"probe-x"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #") "
0 0 14 3 8 #"distance"
0 0 25 3 2 #") "
0 0 14 3 5 #"probe"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 9 #"move-east"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 10 #"make-probe"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 7 #"probe-x"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 3 #") ("
0 0 14 3 7 #"probe-y"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 3 #") ("
0 0 14 3 10 #"probe-logo"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 8 #"distance"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"move-west"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 1 #" "
0 0 14 3 8 #"distance"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 7 #"probe-x"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #") "
0 0 14 3 8 #"distance"
0 0 25 3 2 #") "
0 0 14 3 5 #"probe"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 9 #"move-west"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 10 #"make-probe"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 2 #" ("
0 0 14 3 7 #"probe-x"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 3 #") ("
0 0 14 3 7 #"probe-y"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 3 #") ("
0 0 14 3 10 #"probe-logo"
0 0 25 3 1 #" "
0 0 14 3 5 #"probe"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 8 #"distance"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 112
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 8 #";; TESTS"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 13 #"probe-forward"
0 0 25 3 2 #" ("
0 0 14 3 8 #"probe-at"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #") "
0 0 22 3 3 #"160"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 4 #"-153"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"                "
0 0 19 3 38 #"\"The Example Metioned in the Question\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 18 #"probe-turned-right"
0 0 25 3 2 #" ("
0 0 14 3 13 #"probe-forward"
0 0 25 3 2 #" ("
0 0 14 3 8 #"probe-at"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 6 #"rotate"
0 0 25 3 1 #" "
0 0 22 3 3 #"-90"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                 "
0 0 19 3 34 #"\"Just Rotation and no propagation\""
0 0 25 3 3 #")  "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 18 #"probe-turned-right"
0 0 25 3 2 #" ("
0 0 14 3 13 #"probe-forward"
0 0 25 3 2 #" ("
0 0 14 3 8 #"probe-at"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #") "
0 0 22 3 3 #"160"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 4 #"-153"
0 0 25 3 2 #" ("
0 0 14 3 6 #"rotate"
0 0 25 3 1 #" "
0 0 22 3 3 #"-90"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                 "
0 0 19 3 66
#"\"Wall Hit Check, also first forwarded North and then turned right\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 13 #"probe-forward"
0 0 25 3 2 #" ("
0 0 14 3 18 #"probe-turned-right"
0 0 25 3 2 #" ("
0 0 14 3 8 #"probe-at"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 3 #")) "
0 0 22 3 3 #"160"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 3 #"153"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 6 #"rotate"
0 0 25 3 1 #" "
0 0 22 3 3 #"-90"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"                "
0 0 19 3 71
(
 #"\"Wall Hit Check, this time turned right first and hence forwarded w"
 #"est\""
) 0 0 25 3 18 #")                 "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 13 #"probe-forward"
0 0 25 3 2 #" ("
0 0 14 3 17 #"probe-turned-left"
0 0 25 3 2 #" ("
0 0 14 3 8 #"probe-at"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 3 #")) "
0 0 22 3 2 #"65"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 3 #"-65"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 6 #"rotate"
0 0 25 3 1 #" "
0 0 22 3 2 #"90"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                 "
0 0 19 3 24 #"\"West propagation check\""
0 0 25 3 31 #")                              "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 13 #"probe-forward"
0 0 25 3 2 #" ("
0 0 14 3 18 #"probe-turned-right"
0 0 25 3 2 #" ("
0 0 14 3 13 #"probe-forward"
0 0 25 3 2 #" ("
0 0 14 3 18 #"probe-turned-right"
0 0 25 3 2 #" ("
0 0 14 3 8 #"probe-at"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 3 #")) "
0 0 22 3 3 #"160"
0 0 25 3 3 #")) "
0 0 22 3 3 #"200"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 3 #"153"
0 0 25 3 1 #" "
0 0 22 3 3 #"153"
0 0 25 3 2 #" ("
0 0 14 3 6 #"rotate"
0 0 25 3 1 #" "
0 0 22 3 3 #"180"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                 "
0 0 19 3 55 #"\"Right Turn, East move 153, Right Turn, South move 153\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 13 #"probe-forward"
0 0 25 3 2 #" ("
0 0 14 3 18 #"probe-turned-right"
0 0 25 3 2 #" ("
0 0 14 3 18 #"probe-turned-right"
0 0 25 3 2 #" ("
0 0 14 3 13 #"probe-forward"
0 0 25 3 2 #" ("
0 0 14 3 8 #"probe-at"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #") "
0 0 22 3 2 #"40"
0 0 25 3 4 #"))) "
0 0 22 3 3 #"200"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 3 #"153"
0 0 25 3 2 #" ("
0 0 14 3 6 #"rotate"
0 0 25 3 1 #" "
0 0 22 3 3 #"180"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                 "
0 0 19 3 6 #"\"North"
0 0 19 3 1 #" "
0 0 19 3 4 #"move"
0 0 19 3 1 #" "
0 0 19 3 2 #"20"
0 0 19 3 1 #" "
0 0 19 3 4 #"i.e."
0 0 19 3 2 #" ("
0 0 19 3 1 #"0"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 3 #"-20"
0 0 19 3 1 #")"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 3 #"Two"
0 0 19 3 1 #" "
0 0 19 3 10 #"Right Turn"
0 0 19 3 1 #","
0 0 19 29 1 #"\n"
0 0 19 3 23 #"                  South"
0 0 19 3 1 #" "
0 0 19 3 3 #"try"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 55 #"move 200 but Limit check would limit is to (153-(-20))\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 13 #"probe-forward"
0 0 25 3 2 #" ("
0 0 14 3 13 #"probe-forward"
0 0 25 3 2 #" ("
0 0 14 3 17 #"probe-turned-left"
0 0 25 3 2 #" ("
0 0 14 3 8 #"probe-at"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 3 #")) "
0 0 22 3 3 #"152"
0 0 25 3 2 #") "
0 0 22 3 1 #"2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 4 #"-153"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 6 #"rotate"
0 0 25 3 1 #" "
0 0 22 3 2 #"90"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"                "
0 0 19 3 42 #"\"Wild West, checking boundary propagation\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 17 #"probe-turned-left"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 4 #")) ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 6 #"rotate"
0 0 25 3 1 #" "
0 0 22 3 2 #"90"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 18 #"probe-turned-right"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 4 #")) ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 6 #"rotate"
0 0 25 3 1 #" "
0 0 22 3 3 #"-90"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 12 #"probe-north?"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 2 #") "
0 0 14 3 4 #"true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 12 #"probe-south?"
0 0 25 3 2 #" ("
0 0 14 3 6 #"rotate"
0 0 25 3 1 #" "
0 0 22 3 3 #"180"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 3 #")) "
0 0 14 3 4 #"true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 11 #"probe-east?"
0 0 25 3 2 #" ("
0 0 14 3 6 #"rotate"
0 0 25 3 1 #" "
0 0 22 3 3 #"-90"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 3 #")) "
0 0 14 3 4 #"true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 11 #"probe-west?"
0 0 25 3 2 #" ("
0 0 14 3 6 #"rotate"
0 0 25 3 1 #" "
0 0 22 3 2 #"90"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 3 #")) "
0 0 14 3 4 #"true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 13 #"probe-forward"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 2 #") "
0 0 22 3 2 #"57"
0 0 25 3 3 #") ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 3 #"-57"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 13 #"probe-forward"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 6 #"rotate"
0 0 25 3 1 #" "
0 0 22 3 2 #"90"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 3 #")) "
0 0 22 3 2 #"57"
0 0 25 3 3 #") ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 3 #"-57"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 6 #"rotate"
0 0 25 3 1 #" "
0 0 22 3 2 #"90"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 16 #"check-dist-north"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 2 #") "
0 0 22 3 3 #"200"
0 0 25 3 3 #") ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 4 #"-153"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 16 #"check-dist-south"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 2 #") "
0 0 22 3 3 #"200"
0 0 25 3 3 #") ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 3 #"153"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 15 #"check-dist-east"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 2 #") "
0 0 22 3 3 #"200"
0 0 25 3 3 #") ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 3 #"153"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 15 #"check-dist-west"
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 2 #") "
0 0 22 3 3 #"200"
0 0 25 3 3 #") ("
0 0 14 3 10 #"make-probe"
0 0 25 3 1 #" "
0 0 22 3 4 #"-153"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 10 #"probe-icon"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 112
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;END;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 25 29 1 #"\n"
0           0
