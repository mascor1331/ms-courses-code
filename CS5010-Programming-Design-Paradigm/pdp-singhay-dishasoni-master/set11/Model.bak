#lang racket

;; the model consists of a particle, bouncing with its center from x=0
;; to x=150.  It accepts commands and reports when its status changes

(require "extras.rkt")
(require "Interfaces.rkt")
(require "PerfectBounce.rkt")

(provide Model%)

(define Model%
  (class* object% (Model<%>)
    
    ;; boundaries of the field
    (init-field [particle-selected? false])
    (field [lo 0])
    (field [hi-x 150])
    (field [hi-y 100])
    
    ;; position and velocity of the object
    (init-field [x (/ (+ lo hi-x) 2)])
    (init-field [y (/ (+ lo hi-y) 2)])
    (init-field [vx 0])
    (init-field [vy 0])
    
    ; ListOfController<%>
    (init-field [controllers empty])   
    
    (super-new)
    
    ;; -> Void
    ;; moves the object by v.
    ;; if the resulting x is >= 200 or <= 0
    ;; reports x at ever tick
    ;; reports velocity only when it changes
    #; (define/public (after-tick)
         (begin
           (set! x (within-limits lo (+ x vx) hi-x))
           (set! y (within-limits lo (+ y vy) hi-y))
           (publish-position)
           (cond [(or (= x hi-x) (= x lo))
                  (begin (set! vx (- vx)) (publish-velocity))]
                 [(or (= y hi-y) (= y lo))
                  (begin (set! vy (- vy)) (publish-velocity))]
                 [else "model.rkt after-tick"]
                 )))
    
    (define/public (set-particle-selected b)
      (set! particle-selected? b))
    
    (define/public (after-tick)
      (let ((the-particle (make-particle x y vx vy))
            (the-rect (make-rect lo hi-x lo hi-y)))
        (if (not particle-selected?)
            (new-particle-after-tick the-particle the-rect)
            3e32)))
    
    (define/public (new-particle-after-tick p r)
      (let ((new-particle (particle-after-tick p r)))
        (begin
          (set! x (particle-x new-particle))
          (set! y (particle-y new-particle))
          (publish-position)
          (cond [(or (= x hi-x) (= x lo))
                 (begin (set! vx (particle-vx new-particle))
                        (publish-velocity))]
                [(or (= y hi-y) (= y lo))
                 (begin (set! vy (particle-vy new-particle))
                        (publish-velocity))]
                [else "model.rkt after-tick"])
          )))
    
    (define (within-limits lo val hi)
      (max lo (min val hi)))
    
    ;; Controller -> Void
    ;; register the new controller and send it some data
    (define/public (register c)
      (begin
        (set! controllers (cons c controllers))
        (send c receive-signal (make-report-position x y))
        (send c receive-signal (make-report-velocity vx vy))))
    
    ;; Command -> Void
    ;; decodes the command, executes it, and sends updates to the
    ;; controllers. 
    (define/public (execute-command cmd)
      (cond
        [(set-position? cmd)
         (begin
           (set! x (calculate-x (set-position-x cmd)))
           (set! y (calculate-y (set-position-y cmd)))
           (publish-position))]
        [(incr-velocity? cmd)
         (begin
           (set! vx (+ vx (incr-velocity-dvx cmd)))
           (set! vy (+ vy (incr-velocity-dvy cmd)))
           (publish-velocity))]))
    
    (define (calculate-x x)      
      (cond
        [(<= x 0) 0]
        [(>= x 150) 150]
        [else x]))
    
    (define (calculate-y y)      
      (cond
        [(<= y 0) 0]
        [(>= y 100) 100]
        [else y]))  
    
    ;; report position or velocity to each controller:
    
    (define (publish-position)
      (let ((msg (make-report-position x y)))
        (for-each
         (lambda (obs) (send obs receive-signal msg))
         controllers)
        ))
    
    (define (publish-velocity)
      (let ((msg (make-report-velocity vx vy)))
        (for-each
         (lambda (obs) (send obs receive-signal msg))
         controllers)))
    
    ))





